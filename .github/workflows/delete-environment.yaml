name: Delete Environment

on:
  workflow_dispatch:

jobs:
  delete-environment:
    runs-on: ubuntu-latest

    steps:
      #Download only terraform archives to Environment
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform
          sparse-checkout-cone-mode: false

      #Configuration AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      #Configuration Terraform to commands
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2


      #Download all packages from S3
      - name: Download Terraform State EKS from S3
        working-directory: terraform/configurations/eks
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/eks/terraform.tfstate ./terraform.tfstate

      - name: Download Terraform State ECR from S3
        working-directory: terraform/configurations/ecr
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/ecr/terraform.tfstate ./terraform.tfstate

      - name: Download Terraform State from S3
        working-directory: terraform/configurations/vpc
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/vpc/terraform.tfstate ./terraform.tfstate

        
   
      #Initialize and Destroy Terraform EKS
      - name: Terraform Init EKS
        working-directory: terraform/configurations/eks
        run: terraform init

      - name: Terraform Destroy EKS
        working-directory: terraform/configurations/eks
        run: terraform destroy -auto-approve


      #Install jq
      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      #Delete Load Balancer if exist
      - name: Delete Classic Load Balancers from EKS if exist
        run: |
          CLUSTER_NAME="eksprojectviniciushemming"
          LB_NAMES=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[].LoadBalancerName" --output text)

          for lb in $LB_NAMES; do
            TAGS=$(aws elb describe-tags --load-balancer-names $lb --output json)
            CLUSTER_TAG=$(echo $TAGS | jq -r '.TagDescriptions[0].Tags[] | select(.Key=="kubernetes.io/cluster/'"$CLUSTER_NAME"'") | .Value')
            SERVICE_TAG=$(echo $TAGS | jq -r '.TagDescriptions[0].Tags[] | select(.Key=="kubernetes.io/service-name") | .Value')
      
            if [[ "$CLUSTER_TAG" == "owned" && "$SERVICE_TAG" == "default/python-sample-service" ]]; then
              echo "Deletando Classic Load Balancer $lb..."
              aws elb delete-load-balancer --load-balancer-name $lb
            fi
          done
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Delete EKS Security Groups and Associated ENIs
        run: |
          CLUSTER_TAG="eksprojectviniciushemming"
      
          # Lista todos os SGs com a tag do cluster
          SG_IDS=$(aws ec2 describe-security-groups \
            --filters "Name=tag:kubernetes.io/cluster/$CLUSTER_TAG,Values=owned" \
            --query "SecurityGroups[].GroupId" \
            --output text)
      
          if [ -n "$SG_IDS" ]; then
            for sg in $SG_IDS; do
              echo "üîç Processando Security Group: $sg"
      
              # Lista ENIs associadas
              ENI_IDS=$(aws ec2 describe-network-interfaces \
                --filters "Name=group-id,Values=$sg" \
                --query "NetworkInterfaces[].NetworkInterfaceId" \
                --output text)
      
              if [ -n "$ENI_IDS" ]; then
                for eni in $ENI_IDS; do
                  echo "üóë Deletando ENI: $eni"
                  aws ec2 delete-network-interface --network-interface-id $eni || echo "Falha ao deletar ENI $eni, pode j√° ter sido removida"
                done
              else
                echo "Nenhuma ENI associada ao SG $sg"
              fi
      
              # Revoga ingress/egress rules
              INGRESS_RULES=$(aws ec2 describe-security-groups --group-ids $sg --query "SecurityGroups[0].IpPermissions" --output json)
              EGRESS_RULES=$(aws ec2 describe-security-groups --group-ids $sg --query "SecurityGroups[0].IpPermissionsEgress" --output json)
      
              if [ "$INGRESS_RULES" != "[]" ]; then
                aws ec2 revoke-security-group-ingress --group-id $sg --ip-permissions "$INGRESS_RULES" || true
              fi
              if [ "$EGRESS_RULES" != "[]" ]; then
                aws ec2 revoke-security-group-egress --group-id $sg --ip-permissions "$EGRESS_RULES" || true
              fi
      
              # Deleta o SG apenas uma vez
              aws ec2 delete-security-group --group-id $sg || echo "‚ùå N√£o foi poss√≠vel deletar SG $sg, possivelmente ainda h√° depend√™ncias"
            done
          else
            echo "Nenhum Security Group encontrado com tag $CLUSTER_TAG"
          fi
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #Initialize and Destroy Terraform ECR
      - name: Terraform Init ECR
        working-directory: terraform/configurations/ecr
        run: terraform init
      
      - name: Terraform Destroy ECR
        working-directory: terraform/configurations/ecr
        run: terraform destroy -auto-approve


      #Initialize and Destroy Terraform VPC
      - name: Terraform Init VPC
        working-directory: terraform/configurations/vpc
        run: terraform init

      - name: Terraform Destroy VPC
        working-directory: terraform/configurations/vpc
        run: terraform destroy -var-file="dev.tfvars" -auto-approve
