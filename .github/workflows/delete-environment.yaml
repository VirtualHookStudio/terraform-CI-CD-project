name: Delete Environment

on:
  workflow_dispatch:

jobs:
  create-vpc:
    runs-on: ubuntu-latest

    steps:
      #Download only terraform archives to Environment
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform
          sparse-checkout-cone-mode: false

      #Configuration AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      #Configuration Terraform to commands
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2


      #Download, Initialize and Destroy Terraform State EKS from S3
      - name: Download Terraform State EKS from S3
        working-directory: terraform/configurations/eks
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/eks/terraform.tfstate ./terraform.tfstate
      
      - name: Terraform Init EKS
        working-directory: terraform/configurations/eks
        run: terraform init

      - name: Terraform Destroy EKS
        working-directory: terraform/configurations/eks
        run: terraform destroy -auto-approve

      - name: Delete Load Balancers from EKS if exist
        run: |
          echo "Searching Load Balancers for cluster eksprojectviniciushemming..."
          LB_ARNS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(Tags[?Key=='kubernetes.io/cluster/eksprojectviniciushemming'].Value, 'owned')].LoadBalancerArn" \
            --output text)
          if [ -n "$LB_ARNS" ]; then
            for lb in $LB_ARNS; do
              echo "Deleting Load Balancer $lb"
              aws elbv2 delete-load-balancer --load-balancer-arn $lb
            done
          else
            echo "No Load Balancers found for cluster eksprojectviniciushemming"
          fi
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      #Download, Initialize and Destroy Terraform State ECR from S3
      - name: Download Terraform State ECR from S3
        working-directory: terraform/configurations/ecr
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/ecr/terraform.tfstate ./terraform.tfstate

      - name: Terraform Init ECR
        working-directory: terraform/configurations/ecr
        run: terraform init
      
      - name: Terraform Destroy ECR
        working-directory: terraform/configurations/ecr
        run: terraform destroy -auto-approve


      #Download, Initialize and Destroy Terraform VPC State from S3
      - name: Download Terraform State from S3
        working-directory: terraform/configurations/vpc
        run: aws s3 cp s3://tfstate-viniciushemming-project-terraform-22082025/vpc/terraform.tfstate ./terraform.tfstate

      - name: Terraform Init VPC
        working-directory: terraform/configurations/vpc
        run: terraform init

      - name: Terraform Destroy VPC
        working-directory: terraform/configurations/vpc
        run: terraform destroy -var-file="dev.tfvars" -auto-approve
